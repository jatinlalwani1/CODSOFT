# Movie Rating Prediction

A machine learning project that predicts movie ratings based on various features like genre, director, duration, and user engagement metrics. This project explores regression techniques and provides insights into what factors make movies successful.

## What This Project Does

Ever wondered what makes a movie get high ratings? This project dives into movie data to build predictive models that can estimate a movie's rating based on things like who directed it, how long it is, what genre it belongs to, and how many people voted on it.

I built this to explore regression techniques and understand the movie industry better. It's fascinating to see how certain directors consistently get higher ratings, or how movie length affects audience reception.

## The Dataset

The project works with movie data that includes:
- Movie ratings (what we're trying to predict)
- Release year
- Genre information
- Director names
- Movie duration in minutes
- Number of user votes
- And other movie metadata

I used the IMDB India Movies dataset from Kaggle, but the code can work with any similar movie dataset. If you don't have the dataset, it'll create sample data so you can see how everything works.

## Getting Started

You'll need these Python packages:
```
pandas, numpy, matplotlib, seaborn, scikit-learn
```

Install them with:
```bash
pip install pandas numpy matplotlib seaborn scikit-learn
```

For the dataset, you can either:
1. Download it from Kaggle using kagglehub (shown in the code)
2. Use your own movie dataset with similar columns
3. Let it generate sample data for testing

Just run the Python script and it'll walk through everything automatically.

## What It Actually Does

The project follows a complete data science workflow:

**Data Exploration**: First, it creates lots of visualizations to understand the data - things like rating distributions, how different genres perform, which directors get the best ratings, and how movie characteristics relate to ratings.

**Feature Engineering**: This is where it gets interesting. The code creates new features like:
- How "old" a movie is and whether it's recent
- Whether it's a long movie or short one
- Director performance metrics (their average rating and how many movies they've made)
- Genre-based features using historical performance
- Popularity indicators based on vote counts

**Model Training**: It tries four different approaches:
- Basic linear regression as a baseline
- Ridge regression to handle correlated features
- Lasso regression for automatic feature selection  
- Random Forest to capture complex patterns

**Model Comparison**: After training, it compares all models using multiple metrics and picks the best performer. Usually Random Forest wins because movie ratings depend on complex interactions between features.

## What I Learned

Some interesting patterns emerged from the data:
- Director reputation is huge - famous directors consistently get higher ratings
- There's a sweet spot for movie length - too short or too long tends to hurt ratings
- Recent movies sometimes get inflated ratings compared to older classics
- Genre matters, but not as much as you'd think
- Movies with more votes tend to have more reliable (and often slightly lower) ratings

## Model Performance

The models typically achieve:
- **Random Forest**: Usually the best, around 0.7-0.8 R² score
- **Ridge/Lasso**: Decent performance, around 0.6-0.7 R² score  
- **Linear Regression**: Good baseline, helps identify linear relationships

The RMSE is usually around 0.8-1.2 points, meaning predictions are typically within about 1 rating point of the actual rating.

## Making Predictions

There's a `predict_movie_rating()` function you can use:

```python
# Predict rating for a Christopher Nolan action movie
rating = predict_movie_rating(
    year=2023,
    duration=150, 
    votes=100000,
    genre="Action",
    director="Christopher Nolan"
)
```

You can experiment with different combinations to see how various factors affect predicted ratings.

## The Process Step by Step

1. **Load and explore** the movie data with detailed visualizations
2. **Clean and preprocess** - handle missing values and create new features
3. **Train multiple models** and compare their performance
4. **Analyze feature importance** to understand what drives ratings
5. **Validate predictions** with residual analysis and visualization
6. **Create prediction function** for rating new movies

## Things That Could Be Better

If I were to keep working on this:
- Try more advanced models like XGBoost or neural networks
- Add text analysis of movie descriptions or reviews
- Include box office data if available
- Add cross-validation for more robust model evaluation
- Build a web interface where people could input movie details and get predictions
- Analyze how ratings change over time for the same movie

## What's Interesting About This

This project really shows how machine learning can reveal patterns in entertainment data. The feature importance analysis is particularly cool - you can see quantitatively which factors matter most for movie success.

It's also a good example of regression in action. Unlike classification (survived/didn't survive), regression lets us predict continuous values, which is often more useful in real-world scenarios.

## Running the Code

Just execute the Python script and it handles everything:
- Loads the data (or creates sample data)
- Shows you comprehensive visualizations 
- Trains and compares multiple models
- Makes example predictions
- Explains the results in plain English

The whole process takes a few minutes and generates lots of interesting plots along the way.

## A Personal Note

This was a really fun project to work on. There's something satisfying about using data to understand what makes movies successful. The patterns that emerge really do reflect what we intuitively know about cinema - good directors matter, genre conventions exist for a reason, and audience engagement is a strong signal of quality.

The regression techniques here are applicable to tons of other domains too - predicting house prices, stock returns, sales figures, or really any continuous outcome based on input features.

---

Feel free to experiment with the code, try different features, or use your own movie dataset. That's the best way to learn how these techniques work in practice!
